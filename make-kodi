#!/bin/bash
CLEAN=${CLEAN:=true}
BUILD_THREADS=${BUILD_THREADS:=$(getconf _NPROCESSORS_ONLN)}
BUILD_ENV=${BUILD_ENV:=rbp3}
GIT_BRANCH=${GIT_BRANCH:="master"}
BUILD_NATIVE=${BUILD_NATIVE:=false}
BUILD_TARGET=${BUILD_TARGET:=false}
BUILD_ADDONS=${BUILD_ADDONS:=false}
BUILD_RETRO=${BUILD_RETRO:=false}
BUILD_KODI=${BUILD_KODI:=false}
BUILD_PACKAGE=${BUILD_PACKAGE:=true}
ADDONS=${ADDONS:=all}
VERSION=${VERSION:=debug}
CHROOT_ENV=${CHROOT_ENV:=cosmic}
CHROOT_REPO=${CHROOT_REPO:=http://archive.ubuntu.com/ubuntu}
BUILD_TYPE=${BUILD_TYPE:=Release}
SRC_KODI=${SRC_KODI:=$(pwd)/kodi}
RBPI_DEVENV=${RBPI_DEVENV:=$(pwd)/rpi_userland}
TOOLCHAINS=${TOOLCHAINS:=$RBPI_DEVENV/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf}
TARBALLS=${TARBALLS:=$(pwd)/tarballs}
PACKAGES=${PACKAGES:=$(pwd)/packages}
DEPENDS_PATH=${DEPENDS_PATH:=$(pwd)/depends}
CHROOT_PATH=${CHROOT_PATH:=$(pwd)/chroot}

EXTRA_ARGUMENTS=${EXTRA_ARGUMENTS:=-DENABLE_INTERNAL_CROSSGUID=OFF -DENABLE_INTERNAL_FFMPEG=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_GENERATOR=DEB -DCMAKE_INSTALL_PREFIX=/usr}

if [[ "$1" =~ "-h" ]]; then
  echo -e "
Usage: \n 
  CLEAN=[true|false] clean all depends and clean repository
  BUILD_THREADS=[cpu_core] 
  BUILD_ENV=[rbp1|rbp2|rbp3|linux64] for Raspberry Pi 0/1 (rbpi) , Pi 2 (rbpi2), Pi 3 (rbpi3) , Linux 64Bits (linux64)
  GIT_BRANCH=master 
  BUILD_NATIVE=[false|true] 
  BUILD_TARGET=[false|true] 
  BUILD_ADDONS=[false|true] 
  ADDONS=[All|Addon_name] 
  BUILD_KODI=[true|false] 
  VERSION=[debug|stable]
  
Examples : 
    BUILD_ENV=linux64 BUILD_NATIVE=true BUILD_TARGET=true BUILD_ADDONS=true BUILD_KODI=true VERSION=stable GIT_BRANCH=17.5-Krypton  ./`basename $0` 
    BUILD_ENV=rbp1 BUILD_NATIVE=true BUILD_TARGET=true BUILD_ADDONS=true BUILD_KODI=true VERSION=stable GIT_BRANCH=17.5-Krypton ./`basename $0` 
    BUILD_ENV=rbp2 BUILD_NATIVE=true BUILD_TARGET=true BUILD_ADDONS=true BUILD_KODI=true VERSION=stable GIT_BRANCH=17.5-Krypton ./`basename $0` 
    BUILD_ENV=rbp3 BUILD_NATIVE=true BUILD_TARGET=true BUILD_ADDONS=true BUILD_KODI=true VERSION=stable ./`basename $0` "
  exit 0
fi

######## PREPARE-ENVIRONNEMENT ########
function chroot_env() {
if [ ! -d "${CHROOT_PATH}/${CHROOT_ENV}-64bits" ]; then
  sudo apt install debootstrap schroot
  mkdir -p "${CHROOT_PATH}/${CHROOT_ENV}-64bits"
  sudo debootstrap --arch amd64 --variant=minbase --include="sudo,locales" ${CHROOT_ENV}  "${CHROOT_PATH}/${CHROOT_ENV}-64bits" ${CHROOT_REPO}
  sudo bash -c "cat <<EOF >> ${CHROOT_PATH}/${CHROOT_ENV}-64bits/etc/apt/sources.list
deb ${CHROOT_REPO} ${CHROOT_ENV} main universe restricted multiverse
deb ${CHROOT_REPO} ${CHROOT_ENV}-updates main universe restricted multiverse
deb ${CHROOT_REPO} ${CHROOT_ENV}-backports main universe restricted multiverse
EOF"
  sudo bash -c "cat <<EOF >> ${CHROOT_PATH}/${CHROOT_ENV}-64bits/etc/sudoers
$(id -nu) ALL=(ALL) NOPASSWD: ALL
EOF"
fi
if [ ! -d "/etc/schroot/${CHROOT_ENV}-64bits" ]; then
 sudo cp -R "/etc/schroot/default" "/etc/schroot/${CHROOT_ENV}-64bits"
 sudo bash -c "cat <<EOF >>/etc/schroot/${CHROOT_ENV}-64bits/fstab
/media /media none rw,rbind 0 0
/dev/shm /dev/shm none rw,bind 0 0
/run/shm /run/shm none rw,bind 0 0
/run/user/$(id -u)  /run/user/$(id -u)  none    rw,bind         0       0
EOF"
fi
grep -q ^"profile=${CHROOT_ENV}-64bits$" /etc/schroot/schroot.conf
if [ $? == 1 ]; then
  sudo bash -c "cat <<EOF >> /etc/schroot/schroot.conf
[${CHROOT_ENV}-64bits]
description=${CHROOT_ENV} 64bits
type=directory
directory=${CHROOT_PATH}/${CHROOT_ENV}-64bits
users=root
groups=adm,$(id -nu)
root-groups=adm,$(id -nu)
personality=linux
profile=${CHROOT_ENV}-64bits
EOF"
fi
  schroot -c "${CHROOT_ENV}-64bits" <<EOF
export PATH=$PATH:/usr/sbin:/sbin
echo echo ${CHROOT_ENV} | sudo tee /usr/bin/lsb_release && sudo chmod +x /usr/bin/lsb_release
sudo locale-gen fr_FR.UTF-8
sudo apt update 
sudo apt upgrade -q -y 
sudo apt install -q -y $(cat packages.txt)
sudo apt-get clean
EOF
}
ischroot; ISCHROOT=$?
if [ $ISCHROOT = 1 ]; then
  if [ ! -d $SRC_KODI ]; then
    git clone https://github.com/xbmc/xbmc.git kodi
  fi
  if [ ! -d $RBPI_DEVENV/tools ]; then
    git clone https://github.com/raspberrypi/tools.git --depth 1 $RBPI_DEVENV/tools
  else
    git -C $RBPI_DEVENV/tools pull --depth 1
  fi
  if [ ! -d $RBPI_DEVENV/firmware ]; then
    git clone https://github.com/raspberrypi/firmware.git --depth 1 $RBPI_DEVENV/firmware
  else
    git -C $RBPI_DEVENV/firmware pull --depth 1
  fi
  chroot_env
  schroot -p -c "${CHROOT_ENV}-64bits" ./$0
  exit
fi

WORKSPACE=${WORKSPACE:-$( cd $SRC_KODI ; pwd -P )}

# Clean repos , update and switch to branch
if [ "$CLEAN" = true ]; then
  cd $WORKSPACE
  git clean -xffdq
  git checkout -q -- *
  git checkout -q master
  git pull -q
  git checkout -q $GIT_BRANCH
  CURRENT_GIT_BRANCH="$(cd $WORKSPACE;git branch | grep \*)"
  [[ `echo "$CURRENT_GIT_BRANCH" | grep -i $GIT_BRANCH` ]] || echo "ERROR : Git Branch not match or not found"
  cd ..
fi

############################################## FIX IT ###################################################

## DETECT WORKSPACE/PROJECT/CMAKE

  [ -d "$WORKSPACE/project/cmake/" ] && CMAKE_FOLDER="$WORKSPACE/project/cmake" && CMAKE_PATH="../project/cmake"
  [ -d "$WORKSPACE/cmake/" ] && CMAKE_FOLDER="$WORKSPACE/cmake" && CMAKE_PATH=".."

## CPACK

    #Fix options for CPACK
    sed 's/^PACKAGE_SHLIBDEPS$/PACKAGE_SHLIBDEPS OFF/g' -i  $CMAKE_FOLDER/cpack/deb/packages/*
    sed 's/^PACKAGE_SHLIBDEPS ON$/PACKAGE_SHLIBDEPS OFF/g' -i  $CMAKE_FOLDER/cpack/deb/packages/*
    
    # Fix options CMAKE_INSTALL_DIR CPACK for addons
    sed 's/NEED_SUDO TRUE/NEED_SUDO FALSE/g' -i $CMAKE_FOLDER/addons/CMakeLists.txt
    sed 's|${CMAKE_BINARY_DIR}/.install|/usr|g' -i $CMAKE_FOLDER/addons/CMakeLists.txt

    # Add 'include(CPACK)' for all addons
    IPACK='grep CPack $(BUILDDIR)\/$(PLATFORM)\/build\/$$addon\/CMakeLists.txt || echo "include (CPack)" >> $(BUILDDIR)\/$(PLATFORM)\/build\/$$addon\/CMakeLists.txt;\\'
    grep "grep CPack" $WORKSPACE/tools/depends/xbmc-addons.include || sed -i "/for addon/a $IPACK" $WORKSPACE/tools/depends/xbmc-addons.include
    grep "\-j" $WORKSPACE/tools/depends/xbmc-addons.include || sed -i "s/\$(MAKE)/\$(MAKE) -j $BUILD_THREADS/g" $WORKSPACE/tools/depends/xbmc-addons.include

    # Remove distribution name in name package (exemple : mypackage_yakkety.deb)
    sed -i 's/-${DISTRO_CODENAME}//g'  $CMAKE_FOLDER/cpack/CPackConfigDEB.cmake

    # Remove Git timestamp
    VERSION_TAG=$(grep VERSION_TAG $WORKSPACE/version.txt | awk '{split ($0,a," "); print a[2]}')
    if [ -z "$VERSION_TAG" ]; then
      EXTRA_ARGUMENTS="$EXTRA_ARGUMENTS -DDEBIAN_PACKAGE_TYPE=stable"
      sed 's/~git${PACKAGE_TIMESTAMP}-/-/' -i $CMAKE_FOLDER/cpack/CPackConfigDEB.cmake
      sed 's/:GetVersion(/:GetVersionShort(/' -i $WORKSPACE/xbmc/windows/GUIWindowSystemInfo.cpp
    else
      EXTRA_ARGUMENTS="$EXTRA_ARGUMENTS -DDEBIAN_PACKAGE_TYPE=unstable"
    fi

   # Fix version kodi
    sed "s/RELEASE_IDENTIFIER})$/RELEASE_IDENTIFIER}-rpi${BUILD_ENV: -1})/" -i $CMAKE_FOLDER/cpack/CPackConfigDEB.cmake

    # Fix openssldir path 17.6
    #sed -i 's|--openssldir=$(PREFIX)|--openssldir=/usr/lib/ssl --prefix=/ --libdir=lib --install_prefix=$(PREFIX)|g' $WORKSPACE/tools/depends/target/openssl/Makefile
    sed -i 's|--prefix=$(PREFIX)|--prefix=$(PREFIX) --openssldir=/usr/lib/ssl|g' $WORKSPACE/tools/depends/target/openssl/Makefile
    
    # Fix build for raspberry pi 1 - add option -fPIC for g++
    sed 's|platform_cflags="-mcpu=arm1176jzf-s|platform_cflags="-fPIC -mcpu=arm1176jzf-s|' -i $WORKSPACE/tools/depends/configure.ac
    sed 's|platform_cxxflags="-mcpu=arm1176jzf-s|platform_cxxflags="-fPIC -mcpu=arm1176jzf-s|' -i $WORKSPACE/tools/depends/configure.ac
    
    # Fix error xkbcommon
    sed -i 's|--disable-docs|--disable-docs --with-xkb-config-root=/usr/share/X11/xkb|g' $WORKSPACE/tools/depends/target/libxkbcommon/Makefile
    
    #Fix CEC    --disable-pie CMAKE_POSITION_INDEPENDENT_CODE
    #~ sed -i 's|-DBUILD_SHARED_LIBS=1|-DBUILD_SHARED_LIBS=0 -DCMAKE_POSITION_INDEPENDENT_CODE=0|g' $WORKSPACE/tools/depends/target/libcec/Makefile
    
    # Remove gtest Install because create kodi-unspecified.deb
    sed -i  '/# Install rules/,+4d' $WORKSPACE/lib/gtest/CMakeLists.txt
    
    # Add depends
    sed -i 's/libnfs8/libnfs11/g' $WORKSPACE/cmake/cpack/deb/packages/kodi.txt.in
    sed -i 's/libbluray1 | libbluray2/libinput10, libbluray2, libsmbclient/g' $WORKSPACE/cmake/cpack/deb/packages/kodi.txt.in

############################################## END FIX IT ################################################

## RBPI

    #Fix rbpi version
    if [[ $BUILD_ENV == rbp* ]]; then
      [ ${BUILD_ENV: -1} = 1 ] && OPTIONS="--with-platform=raspberry-pi"
      [ ${BUILD_ENV: -1} = 2 ] && OPTIONS="--with-platform=raspberry-pi2"
      [ ${BUILD_ENV: -1} = 3 ] && OPTIONS="--with-platform=raspberry-pi3"
      ARCHITECTURE="armhf"
      OPTIONS="$OPTIONS --host=arm-linux-gnueabihf --with-toolchain=$TOOLCHAINS --with-firmware=$RBPI_DEVENV/firmware --disable-debug"
      EXTRA_ARGUMENTS="$EXTRA_ARGUMENTS -DDEB_PACKAGE_ARCHITECTURE=$ARCHITECTURE -DCMAKE_TOOLCHAIN_FILE=$WORKSPACE/tools/depends/target/Toolchain.cmake"
      export XBMC_PLATFORM_DIR=rbpi
      
    elif [[ $BUILD_ENV == "arm64" ]]; then
    
      ARCHITECTURE="arm64"
      TOOLCHAINS="$RBPI_DEVENV/tools/arm-bcm2708/gcc-arm-8.2-2018.11-x86_64-aarch64-linux-gnu"
      OPTIONS="--host=aarch64-linux-gnu --with-toolchain=$TOOLCHAINS --with-firmware=$RBPI_DEVENV/firmware --disable-debug"
      EXTRA_ARGUMENTS="$EXTRA_ARGUMENTS -DDEB_PACKAGE_ARCHITECTURE=$ARCHITECTURE -DCMAKE_TOOLCHAIN_FILE=$WORKSPACE/tools/depends/target/Toolchain.cmake"
      export XBMC_PLATFORM_DIR=rbpi    
      
    else
      ARCHITECTURE="amd64"
      OPTIONS="$OPTIONS --host=x86_64-linux-gnu --with-toolchain=/usr --disable-debug"
      EXTRA_ARGUMENTS="$EXTRA_ARGUMENTS -DDEB_PACKAGE_ARCHITECTURE=$ARCHITECTURE -DCMAKE_TOOLCHAIN_FILE=$WORKSPACE/tools/depends/target/Toolchain.cmake"
    fi
    
    if [ "$ENABLE_WAYLAND" = true ];then
      OPTIONS="$OPTIONS --with-platform=wayland"
      EXTRA_ARGUMENTS="$EXTRA_ARGUMENTS -DCORE_PLATFORM_NAME=wayland -DWAYLAND_RENDER_SYSTEM=gl"
    fi

## RETROPLAYER

  if [ "$BUILD_RETRO" = true ]; then
    sed -i '1 s|.*|binary-addons https://github.com/kodi-game/repo-binary-addons.git retroplayer|' $CMAKE_FOLDER/addons/bootstrap/repositories/binary-addons.txt
  fi

############################################## ### ###################################################

clear
echo "====================== KODI BUILD ======================"
echo "BRANCH               : $GIT_BRANCH"
echo "CURRENT GIT BRANCH   : $CURRENT_GIT_BRANCH"
echo "CLEAN GIT REPOSITORY : $CLEAN"
echo "BUILD_ENV            : $BUILD_ENV"
echo "CHROOT               : $([ $ISCHROOT = 0 ] && echo true || echo false)"
echo "THREADS NUMBER       : $BUILD_THREADS"
echo "BUILD NATIVE         : $BUILD_NATIVE"
echo "BUILD TARGET         : $BUILD_TARGET"
echo "BUILD ADDONS         : $BUILD_ADDONS - $ADDONS"
echo "BUILD KODI           : $BUILD_KODI"
echo "ARCHITECTURE         : $ARCHITECTURE"
echo "VERSION              : $VERSION"
echo "========================================================"
sleep 3

PATH=$PATH:/$TOOLCHAINS/bin

#~ set -x
######## PREPARE-DEPENDS ########
echo '######## PREPARE-DEPENDS ########'
cd $WORKSPACE/tools/depends;./bootstrap

######## CONFIGURE-DEPENDS ########
echo '######## CONFIGURE-DEPENDS ########'
cd $WORKSPACE/tools/depends;./configure $OPTIONS --prefix=$DEPENDS_PATH --with-tarballs=$TARBALLS

######## MAKE-DEPENDS ########
echo '######## MAKE-DEPENDS ########'
cd $WORKSPACE/tools/depends;[ "$BUILD_NATIVE" = true ] && make -C native -j $BUILD_THREADS
cd $WORKSPACE/tools/depends;[ "$BUILD_TARGET" = true ] && make -C target -j $BUILD_THREADS

######## CONFIGURE-XBMC ########
echo '######## CONFIGURE-XBMC ########'
CMAKE_BIN=$DEPENDS_PATH/$(grep -P '\w+-linux-gnu-native' -o $WORKSPACE/tools/depends/target/Toolchain.cmake)/bin/cmake
CPACK_BIN=$DEPENDS_PATH/$(grep -P '\w+-linux-gnu-native' -o $WORKSPACE/tools/depends/target/Toolchain.cmake)/bin/cpack
cd $WORKSPACE;mkdir build
cd $WORKSPACE/build;[ "$BUILD_KODI" = true ]  && $CMAKE_BIN $EXTRA_ARGUMENTS $CMAKE_PATH

######## MAKE-XBMC ########
echo '######## MAKE-XBMC ########'
cd $WORKSPACE/build;[ "$BUILD_KODI" = true ] && [ "$BUILD_PACKAGE" = false ] && make kodi -j $BUILD_THREADS # or : $CMAKE_BIN --build . -- -j $BUILD_THREADS

#~ ######## MAKE-PACKAGES ########
echo '######## MAKE-PACKAGES ########'
cd $WORKSPACE/build;[ "$BUILD_KODI" = true ] && [ "$BUILD_PACKAGE" = true ] && make package -j $BUILD_THREADS && mkdir -p $PACKAGES/$GIT_BRANCH/$BUILD_ENV && mv packages/*.deb $PACKAGES/$GIT_BRANCH/$BUILD_ENV

if [ "$BUILD_ADDONS" = true ];then
  {
    echo '######## MAKE-PACKAGES-ADDONS ########'
    cd $WORKSPACE/build;make -C $WORKSPACE/tools/depends/target/binary-addons -j $BUILD_THREADS ADDONS=${ADDONS} INSTALL_PREFIX=/usr CROSS_COMPILING=yes #VERBOSE=1 V=99
    cd $WORKSPACE/tools/depends/target/binary-addons/*/
    for folder in $(ls -d */); do
        if [ -d ${folder%%/}/src/${folder%%-prefix/}-build ]; then
        {
          cd ${folder%%/}/src/${folder%%-prefix/}-build          
          VERSION=$(grep 'version=\".*\"$' ../../../build/${folder%%-prefix/}/${folder%%-prefix/}/addon.xml.in | awk -F '=' '{print $2}'|sed 's/"//g')
          NAME=$(echo ${folder%%-prefix/}|sed 's/\./-/g')
          ${CPACK_BIN} -G DEB \
          -D CPACK_PACKAGE_VERSION=${VERSION}-rpi${BUILD_ENV: -1} \
          -D CPACK_PACKAGE_NAME=kodi-${NAME} \
          -D CPACK_PACKAGE_CONTACT=cyr-ius@ipocus.net \
          -D CPACK_DEBIAN_PACKAGE_ARCHITECTURE=${ARCHITECTURE} \
          -D CPACK_PACKAGE_FILE_NAME=kodi-${NAME}-${VERSION}-rpi${BUILD_ENV: -1}_${ARCHITECTURE} \
          -B $PACKAGES/$GIT_BRANCH/$BUILD_ENV # -V
          cd ../../..
        } fi
    done
  }
fi
