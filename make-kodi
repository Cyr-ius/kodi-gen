#!/bin/bash
BUILD_THREADS=${BUILD_THREADS:=4}
BUILD_ENV=${BUILD_ENV:=rbpi}
GIT_BRANCH=${GIT_BRANCH:="master"}
BUILD_DIRECT=${BUILD_DIRECT:=false}
BUILD_DEPENDS=${BUILD_DEPENDS:=true}
BUILD_BINARY_ADDONS=${BUILD_BINARY_ADDONS:=true}
Configuration=${Configuration:=Release}
CHROOT_ENV=artful

SRC_KODI=${SRC_KODI:=$(pwd)/kodi}
JENKINS_RBPI_DEVENV=${JENKINS_RBPI_DEVENV:=$(pwd)/rpi_userland}
TARBALLS=${TARBALLS:=$(pwd)/tarballs}
PACKAGES=${PACKAGES:=$(pwd)/packages}
XBMC_DEPENDS_ROOT=${XBMC_DEPENDS_ROOT:=$(pwd)/depends}
CHROOT_PATH=${CHROOT_PATH:=$(pwd)/chroot}


export JENKINS_RBPI_DEVENV
export TARBALLS
export XBMC_DEPENDS_ROOT
export BUILDTHREADS=$BUILD_THREADS
export BUILD_BINARY_ADDONS
export Configuration

######## PREPARE-ENVIRONNEMENT ########
function chroot_env() {
if [ ! -d "${CHROOT_PATH}/${CHROOT_ENV}-64bit" ]; then
  sudo apt install debootstrap schroot
  mkdir -p "${CHROOT_PATH}/${CHROOT_ENV}-64bit"
  sudo debootstrap --arch amd64 ${CHROOT_ENV} "${CHROOT_PATH}/${CHROOT_ENV}-64bit" http://archive.ubuntu.com/ubuntu
  sudo bash -c "cat <<EOF >> ${CHROOT_PATH}/${CHROOT_ENV}-64bit/etc/apt/sources.list
deb http://archive.ubuntu.com/ubuntu ${CHROOT_ENV} main universe restricted multiverse
deb http://archive.ubuntu.com/ubuntu ${CHROOT_ENV}-updates main universe restricted multiverse
deb http://archive.ubuntu.com/ubuntu ${CHROOT_ENV}-backports main universe restricted multiverse
EOF"
  sudo bash -c "cat <<EOF >> ${CHROOT_PATH}/${CHROOT_ENV}-64bit/etc/sudoers
$(id -nu) ALL=(ALL) NOPASSWD: ALL
EOF"
fi
if [ ! -d "/etc/schroot/${CHROOT_ENV}-64bit" ]; then
 sudo cp -R "/etc/schroot/default" "/etc/schroot/${CHROOT_ENV}-64bit"
 sudo bash -c "cat <<EOF >>/etc/schroot/${CHROOT_ENV}-64bit/fstab
/media /media none rw,rbind 0 0
/dev/shm /dev/shm none rw,bind 0 0
/run/shm /run/shm none rw,bind 0 0
/run/user/$(id -u)  /run/user/$(id -u)  none    rw,bind         0       0
EOF"
fi
grep -q ^profile=${CHROOT_ENV}-64bit$ /etc/schroot/schroot.conf
if [ $? == 1 ]; then
  sudo bash -c "cat <<EOF >> /etc/schroot/schroot.conf
[${CHROOT_ENV}-64bit]
description=Ubuntu ${CHROOT_ENV} 64bit
type=directory
directory=${CHROOT_PATH}/${CHROOT_ENV}-64bit
users=root
groups=adm,$(id -nu)
root-groups=adm,$(id -nu)
personality=linux
profile=${CHROOT_ENV}-64bit
EOF"
fi
  schroot -c "${CHROOT_ENV}-64bit" <<EOF
sudo apt update 
sudo apt upgrade -q -y 
sudo apt install -q -y $(cat packages.txt)
EOF
}
ischroot; ISCHROOT=$?
if [ $ISCHROOT = 1 ]; then
  if [ ! -d $SRC_KODI ]; then
    git clone https://github.com/xbmc/xbmc.git kodi
  fi
  chroot_env
  set -x
  schroot -p -c "${CHROOT_ENV}-64bit" ./make-kodi
  exit
fi

WORKSPACE=${WORKSPACE:-$( cd $SRC_KODI ; pwd -P )}

mkdir -p $JENKINS_RBPI_DEVENV
mkdir -p $TARBALLS
mkdir -p $PACKAGES
mkdir -p $XBMC_DEPENDS_ROOT

if [ -d $JENKINS_RBPI_DEVENV/tools ]; then
  cd $JENKINS_RBPI_DEVENV/tools;git pull origin master
else
  cd $JENKINS_RBPI_DEVENV;git clone git://github.com/raspberrypi/tools.git --depth=1 -b master
fi

# Clean repos , update and switch to branch
if [ "$BUILD_DIRECT" = false ]; then
  cd $WORKSPACE
  git clean -xfddq
  git checkout -q -- .
  git checkout -q master
  git pull -q origin master
  git checkout -q $GIT_BRANCH
  cd ..
fi

# Fix CMAKE options
VERSION_TAG=$(grep VERSION_TAG $WORKSPACE/version.txt | awk '{split ($0,a," "); print a[2]}')
[ "$BUILD_ENV" = "rbpi" ] && ARCHITECTURE=armhf || ARCHITECTURE=amd64
[ -z "$VERSION_TAG" ] && DEBIAN_PACKAGE_TYPE=stable || DEBIAN_PACKAGE_TYPE=unstable
CMAKE_EXTRA_ARGUMENTS=${CMAKE_EXTRA_ARGUMENTS:=" -D DEBIAN_PACKAGE_TYPE=$DEBIAN_PACKAGE_TYPE -D CPACK_SYSTEM_NAME=$ARCHITECTURE -D CPACK_GENERATOR=DEB -DCMAKE_INSTALL_PREFIX=/usr"}
export CMAKE_EXTRA_ARGUMENTS
grep -q -F "CMAKE_EXTRA_ARGUMENTS" $WORKSPACE/tools/depends/target/cmakebuildsys/Makefile || sed -i "s#-DCMAKE_BUILD_TYPE=\$(Configuration)#-DCMAKE_BUILD_TYPE=\$(Configuration) \$(CMAKE_EXTRA_ARGUMENTS)#g" $WORKSPACE/tools/depends/target/cmakebuildsys/Makefile 

# Fix options for CPACK
sed -i 's/^PACKAGE_SHLIBDEPS$/PACKAGE_SHLIBDEPS OFF/g'  $WORKSPACE/cmake/cpack/deb/packages/* || sed -i 's/^PACKAGE_SHLIBDEPS$/PACKAGE_SHLIBDEPS OFF/g'  $WORKSPACE/project/cmake/cpack/deb/packages/*
sed -i 's/^PACKAGE_SHLIBDEPS ON$/PACKAGE_SHLIBDEPS OFF/g'  $WORKSPACE/cmake/cpack/deb/packages/* || sed -i 's/^PACKAGE_SHLIBDEPS ON$/PACKAGE_SHLIBDEPS OFF/g'  $WORKSPACE/project/cmake/cpack/deb/packages/*

# Remove distribution name in name package (exemple : mypackage_yakkety.deb)
sed -i 's/-${DISTRO_CODENAME}//g'  $WORKSPACE/cmake/cpack/CPackConfigDEB.cmake || sed -i 's/-${DISTRO_CODENAME}//g' $WORKSPACE/project/cmake/cpack/CPackConfigDEB.cmake

# Remove Git timestamp
sed -i 's/~git${PACKAGE_TIMESTAMP}-/-/g'  $WORKSPACE/cmake/cpack/CPackConfigDEB.cmake || sed -i 's/~git${PACKAGE_TIMESTAMP}-/-/g' $WORKSPACE/project/cmake/cpack/CPackConfigDEB.cmake
grep -q -F "GetVersionShort" $WORKSPACE/xbmc/windows/GUIWindowSystemInfo.cpp || sed -i 's/GetVersion/GetVersionShort/g' $WORKSPACE/xbmc/windows/GUIWindowSystemInfo.cpp

# Fix libbluray for kodi 17.4
grep -q -F "libbluray2" $WORKSPACE/project/cmake/cpack/deb/packages/kodi.txt.in || sed -i 's#libbluray1#libbluray1 | libbluray2#g' $WORKSPACE/project/cmake/cpack/deb/packages/kodi.txt.in

clear
echo "====================== KODI BUILD ======================"
echo "BRANCH             : $GIT_BRANCH"
echo "CURRENT GIT BRANCH : $(cd $WORKSPACE;git branch | grep \*)"
echo "BUILD_ENV          : $BUILD_ENV"
echo "ARCHITECTURE       : $ARCHITECTURE"
echo "DEBIAN_PACKAGE_TYPE: $DEBIAN_PACKAGE_TYPE"
echo "BINARY ADDONS      : $BUILD_BINARY_ADDONS"
echo "CHROOT             : $([ $ISCHROOT = 0 ] && echo true || echo false)"
echo "========================================================"
sleep 5

######## PREPARE-DEPENDS ########

[ "$BUILD_DIRECT" = false ] && . $WORKSPACE/tools/buildsteps/$BUILD_ENV/prepare-depends


######## CONFIGURE-DEPENDS ########

[ "$BUILD_DIRECT" = false ] && . $WORKSPACE/tools/buildsteps/$BUILD_ENV/configure-depends

######## MAKE-DEPENDS ########

[ "$BUILD_DEPENDS" = true ] && . $WORKSPACE/tools/buildsteps/$BUILD_ENV/make-depends

######## PREPARE-XBMC ########

. $WORKSPACE/tools/buildsteps/$BUILD_ENV/prepare-xbmc

######## CONFIGURE-XBMC ########

. $WORKSPACE/tools/buildsteps/$BUILD_ENV/configure-xbmc

######## MAKE-XBMC ########

. $WORKSPACE/tools/buildsteps/$BUILD_ENV/make-xbmc

######## MAKE-PACKAGES ########

cd $WORKSPACE/build;cpack -B $PACKAGES/$GIT_BRANCH

if [ "$BUILD_BINARY_ADDONS" = true ];then
    find $WORKSPACE/tools/depends/target/binary-addons/*/*/*/*-build/CMakeCache.txt -exec bash -c "sed -i 's|CMAKE_INSTALL_PREFIX:PATH=.*|CMAKE_INSTALL_PREFIX:PATH=/usr|g' {}" \;
    cd $WORKSPACE/tools/depends/target/binary-addons/*/
    for folder in $(ls -d */); do
        if [ -d ${folder%%/}/src/${folder%%-prefix/}-build ]; then
        {
          cd ${folder%%/}/src/${folder%%-prefix/}-build          
          VERSION=$(grep 'version=\".*\"$' ../../../build/${folder%%-prefix/}/${folder%%-prefix/}/addon.xml.in | awk -F '=' '{print $2}'|sed 's/"//g')
          NAME=$(echo ${folder%%-prefix/}|sed 's/\./-/g')
          cpack -V -G DEB \
          -D CPACK_PACKAGE_VERSION=${VERSION} \
          -D CPACK_PACKAGE_NAME=kodi-${NAME} \
          -D CPACK_PACKAGE_CONTACT=cyr-ius@ipocus.net \
          -D CPACK_DEBIAN_PACKAGE_ARCHITECTURE=${ARCHITECTURE} \
          -D CPACK_PACKAGE_FILE_NAME=kodi-${NAME}-${VERSION}_${ARCHITECTURE} \
          -B $PACKAGES/$GIT_BRANCH
          cd ../../..
        } fi
    done
fi
